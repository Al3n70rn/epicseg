// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// smallWeightHamiltonianPath
Rcpp::IntegerVector smallWeightHamiltonianPath(Rcpp::NumericMatrix dmat);
RcppExport SEXP epicseg_smallWeightHamiltonianPath(SEXP dmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dmat(dmatSEXP );
        Rcpp::IntegerVector __result = smallWeightHamiltonianPath(dmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bindCols
Rcpp::IntegerMatrix bindCols(Rcpp::List vlist);
RcppExport SEXP epicseg_bindCols(SEXP vlistSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type vlist(vlistSEXP );
        Rcpp::IntegerMatrix __result = bindCols(vlist);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// writeCountsTXT
void writeCountsTXT(Rcpp::IntegerMatrix counts, std::vector<std::string> marks, std::string path);
RcppExport SEXP epicseg_writeCountsTXT(SEXP countsSEXP, SEXP marksSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< std::vector<std::string> >::type marks(marksSEXP );
        Rcpp::traits::input_parameter< std::string >::type path(pathSEXP );
        writeCountsTXT(counts, marks, path);
    }
    return R_NilValue;
END_RCPP
}
// avgCountsPerClust
Rcpp::NumericMatrix avgCountsPerClust(Rcpp::IntegerMatrix counts, Rcpp::IntegerVector clusts);
RcppExport SEXP epicseg_avgCountsPerClust(SEXP countsSEXP, SEXP clustsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type clusts(clustsSEXP );
        Rcpp::NumericMatrix __result = avgCountsPerClust(counts, clusts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// statesToSegments_helper
Rcpp::List statesToSegments_helper(Rcpp::RObject regions, Rcpp::IntegerVector states);
RcppExport SEXP epicseg_statesToSegments_helper(SEXP regionsSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::RObject >::type regions(regionsSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type states(statesSEXP );
        Rcpp::List __result = statesToSegments_helper(regions, states);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// segmentsToBed
void segmentsToBed(Rcpp::RObject segments, std::vector<std::string> labels, std::vector<std::string> colors, std::string path);
RcppExport SEXP epicseg_segmentsToBed(SEXP segmentsSEXP, SEXP labelsSEXP, SEXP colorsSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::RObject >::type segments(segmentsSEXP );
        Rcpp::traits::input_parameter< std::vector<std::string> >::type labels(labelsSEXP );
        Rcpp::traits::input_parameter< std::vector<std::string> >::type colors(colorsSEXP );
        Rcpp::traits::input_parameter< std::string >::type path(pathSEXP );
        segmentsToBed(segments, labels, colors, path);
    }
    return R_NilValue;
END_RCPP
}
